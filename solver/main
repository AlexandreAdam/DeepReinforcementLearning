

from dynamic4 import DynamicGame
from solver.Node import Node
from solver.Solver import Solver
import numpy as np

# TEST CONFIGURATION

shape = (4, 5)
sequence = [18, 13, 17, 12]  # First player wins in 4 moves, node score = 6
# sequence = [18, 13, 17, 12, 15]  # First player wins in 5 moves, node score = 5
# sequence = [15, 17, 12, 18, 13]  # Second player wins in 4 moves, node score = 6

#shape = (6, 7)
# sequence = [38, 31, 37, 30] # First player wins in 4 moves (42/2 - 4 = 17 stones remaining)
# sequence = [38, 31, 24, 17, 10, 3, 39, 40, 36, 37, 30, 23, 16, 35, 29, 28, 22]

# INITIALIZATION

game = DynamicGame(grid_shape=shape)
grid_index = np.arange(0, shape[0]*shape[1], 1).reshape(shape)

for action in sequence:
    game.step(action)

print('Layout: \n', grid_index)
print('Initial state: \n', game)

solver = Solver(game.gameState)
#print(solver.negamax(node=solver.root_node, color=game.currentPlayer))

game.step(Solver(game.gameState).get_action())
print(game)
game.step(Solver(game.gameState).get_action())
print(game)
game.step(Solver(game.gameState).get_action())
print(game)

